CREATE TABLE Customer(id SERIAL UNIQUE, name VARCHAR(40), email VARCHAR(40) UNIQUE, password VARCHAR(40));

Create table users(id SERIAL UNIQUE, username varchar(30) UNIQUE NOT NULL, email varchar(50) UNIQUE NOT NULL, password varchar(30) NOT NULL, picture varchar(100) DEFAULT '/pictures/lang-logo.png', usertype varchar(1) DEFAULT 'R', date_joined Date NOT NULL DEFAULT CURRENT_DATE, PRIMARY KEY (id) );

Create table followers(entry_number SERIAL UNIQUE, the_user integer NOT NULL, is_following integer NOT NULL, PRIMARY KEY(entry_number), FOREIGN KEY (the_user) REFERENCES users(id) );

Create table favouriteTracks(entry_number SERIAL UNIQUE, user_id integer NOT NULL, track_id char(22) NOT NULL );

Create table favouriteArtists(entry_number SERIAL UNIQUE, user_id integer NOT NULL, artist_id char(22) NOT NULL );

NEW **********

create table notifications (time timestamptz default now(), recipient varchar(30), message text);

Create table ratings(entry_number SERIAL UNIQUE, user_id integer NOT NULL, rating_target char(22) NOT NULL, rating integer NOT NULL CHECK (rating > 0 and rating <= 5), PRIMARY KEY(entry_number), FOREIGN KEY (user_id) REFERENCES users(id) );

**********

Chats table create statement:
CREATE TABLE chats (chatID int GENERATED BY DEFAULT AS IDENTITY, name text, participants varchar(20)[]);


Messages table create statement:
CREATE TABLE messages (chatID int, time timestamptz DEFAULT now(), sender varchar(20), message text);

CREATE TABLE profile_history(
    operation varchar(1) NOT NULL,
    stamp timestamp NOT NULL,
    id SERIAL NOT NULL,
    name VARCHAR(40),
    email VARCHAR(40),
    password VARCHAR(40),
    picture VARCHAR(100)
);

CREATE OR REPLACE FUNCTION user_profile_history() RETURNS TRIGGER AS $profile_history$
    BEGIN

        IF (TG_OP = 'DELETE') THEN
            INSERT INTO profile_history SELECT 'D', now(), OLD.id, OLD.username, OLD.email, OLD.password, OLD.picture;
        ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO profile_history SELECT 'U', now(), NEW.id, NEW.username, NEW.email, NEW.password, NEW.picture;
        ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO profile_history SELECT 'I', now(), NEW.id, NEW.username, NEW.email, NEW.password, NEW.picture;
        END IF;
        RETURN NULL;
    END;
$profile_history$ LANGUAGE plpgsql;

CREATE TRIGGER profile_history AFTER INSERT OR UPDATE OR DELETE ON users
    FOR EACH ROW EXECUTE FUNCTION user_profile_history();




var getUserProfileHistoryQuery = `SELECT * from users where id='${id}';`;
  pool.query(getUserByIdQuery, (error, result) => {
        if(error)
          res.end(error);
        var results = {'rows':result.rows};
        res.render('pages/data', results);
      })


    for(var i=0 ; i< r.length ; i++) {
        if(r[i].operation = 'D') {
            print : profile deleted
        }
        else if(r[i].operation = 'I') {
            print : profile created. Welcome.
        }
        else {
    	if(r[i].name.localeCompare(r[i-1].name)!=0) {
    	    print : username updated.
            }
    	if(r[i].email.localeCompare(r[i-1].email)!=0) {
    	    print : email updated.
            }
    	if(r[i].password.localeCompare(r[i-1].password)!=0) {
    	    print : password updated.
            }
    	if(r[i].picture.localeCompare(r[i-1].picture)!=0) {
    	    print : profile picture updated.
            }
        }
    }
